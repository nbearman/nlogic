-- -- -- -- |	//=========================================================================
-- -- -- -- |	// kernel entry point
-- -- -- -- |	//=========================================================================
00 00 00 00 |	FILLB0
00 00 00 B0 |	33 GPE
-- -- -- -- |	
-- -- -- -- |	//set the MMU VA break point
00 00 00 B2 |	IADF WBASE
00 00 00 B4 |	SKIP PC
00 00 00 B6 |	00 00 10 00 //MMIO base address (in VA)
00 00 00 BA |	08 WOFST //breakpoint register
00 00 00 BC |	00 WMEM //breakpoint at 0
-- -- -- -- |	
-- -- -- -- |	//enable the breakpoint
00 00 00 BE |	10 WOFST //breakpoint enabled register
00 00 00 C0 |	01 WMEM //non-zero -> enabled
-- -- -- -- |	
00 00 00 C2 |	00 RBASE
00 00 00 C4 |	00 ROFST
-- -- -- -- |	
-- -- -- -- |	//jump to 0 in user space
00 00 00 C6 |	00 PC
-- -- -- -- |	
-- -- -- -- |	//=========================================================================
-- -- -- -- |	// interrupt handler
-- -- -- -- |	//=========================================================================
00 00 00 C8 |	FILL200
00 00 02 00 |	WBASE DMEM00
00 00 02 02 |	WOFST DMEM04
-- -- -- -- |	
-- -- -- -- |	//TODO change this to save registers to kernel's stack
-- -- -- -- |	//dump registers to VA 0100
00 00 02 04 |	IADF WBASE
00 00 02 06 |	SKIP PC
00 00 02 08 |	00 00 01 00
00 00 02 0C |	00 WOFST
00 00 02 0E |	GPA WMEM
00 00 02 10 |	04 WOFST
00 00 02 12 |	GPB WMEM
00 00 02 14 |	08 WOFST
00 00 02 16 |	GPC WMEM
00 00 02 18 |	0C WOFST
00 00 02 1A |	GPD WMEM
00 00 02 1C |	10 WOFST
00 00 02 1E |	GPE WMEM
00 00 02 20 |	14 WOFST
00 00 02 22 |	GPF WMEM
00 00 02 24 |	18 WOFST
00 00 02 26 |	GPG WMEM
00 00 02 28 |	1C WOFST
00 00 02 2A |	GPH WMEM
-- -- -- -- |	
00 00 02 2C |	20 WOFST
00 00 02 2E |	COMPA WMEM
00 00 02 30 |	24 WOFST
00 00 02 32 |	COMPB WMEM
00 00 02 34 |	28 WOFST
00 00 02 36 |	RBASE WMEM
00 00 02 38 |	2C WOFST
00 00 02 3A |	ROFST WMEM
00 00 02 3C |	30 WOFST
00 00 02 3E |	ALUM WMEM
00 00 02 40 |	34 WOFST
00 00 02 42 |	ALUA WMEM
00 00 02 44 |	38 WOFST
00 00 02 46 |	ALUB WMEM
00 00 02 48 |	3C WOFST
00 00 02 4A |	FPUM WMEM
00 00 02 4C |	40 WOFST
00 00 02 4E |	FPUA WMEM
00 00 02 50 |	44 WOFST
00 00 02 52 |	FPUB WMEM
-- -- -- -- |	
-- -- -- -- |	//determine the cause of the interrupt
-- -- -- -- |	//mask flag to check if interrupt was raised on MMU channel
00 00 02 54 |	FLAG ALUA
00 00 02 56 |	IADF ALUB
00 00 02 58 |	SKIP PC
00 00 02 5A |	00 00 00 01 //mask for the first channel (MMU)
00 00 02 5E |	08 ALUM //AND mode
00 00 02 60 |	ALUR COMPA
00 00 02 62 |	00 COMPB //if flag channel is 1, jump to mmu interrupt handler
00 00 02 64 |	COMPR PC
00 00 02 66 |	:non_mmu_interrupt
00 00 02 6A |	:mmu_interrupt
-- -- -- -- |	
-- -- -- -- |	@non_mmu_interrupt
-- -- -- -- |	//if interrupt is not from MMU
-- -- -- -- |	//do nothing if the interrupt is from anywhere besides the MMU
00 00 02 6E |	7F FLAG
-- -- -- -- |	
-- -- -- -- |	@mmu_interrupt
-- -- -- -- |	//else interrupt is from MMU
-- -- -- -- |	//retrieve the faulted PTE from the MMU
00 00 02 70 |	IADF RBASE
00 00 02 72 |	SKIP PC
00 00 02 74 |	00 00 10 00
00 00 02 78 |	0C ROFST
00 00 02 7A |	RMEM GPA
-- -- -- -- |	
-- -- -- -- |	//check PTE protections
-- -- -- -- |	//get them from PTE
00 00 02 7C |	GPA ALUA //PTE to ALU
00 00 02 7E |	IADF ALUB //mask to ALU
00 00 02 80 |	SKIP PC
00 00 02 82 |	C0 00 00 00 //mask for the RW bits of the PTE
00 00 02 86 |	08 ALUM //AND mode
-- -- -- -- |	
00 00 02 88 |	ALUR ALUA //RW bits to ALU
00 00 02 8A |	1E ALUB //shift 30 bits right
00 00 02 8C |	06 ALUM //right shift mode
-- -- -- -- |	
-- -- -- -- |	//see which of 00, 01, 10, 11 the RW bits are
00 00 02 8E |	ALUR COMPA
00 00 02 90 |	00 COMPB
00 00 02 92 |	COMPR PC
00 00 02 94 |	:r0w0
00 00 02 98 |	:_r0w0
-- -- -- -- |	@_r0w0
00 00 02 9C |	01 COMPB
00 00 02 9E |	COMPR PC
00 00 02 A0 |	:r0w1
00 00 02 A4 |	:_r0w1
-- -- -- -- |	@_r0w1
00 00 02 A8 |	02 COMPB
00 00 02 AA |	COMPR PC
00 00 02 AC |	:r1w0
00 00 02 B0 |	:_r1w0
-- -- -- -- |	@_r1w0
00 00 02 B4 |	7F FLAG //halt; RW was 11, no page fault should have occurred
-- -- -- -- |	
-- -- -- -- |	@r0w0
-- -- -- -- |	//not mapped (possibly syscall)
00 00 02 B6 |	7F FLAG //TODO for now, just halt
-- -- -- -- |	
-- -- -- -- |	@r1w0
-- -- -- -- |	//page is readable but not writable
-- -- -- -- |	//either a shared page or a clean page
-- -- -- -- |	//page needs to be split or marked as dirty
00 00 02 B8 |	7F FLAG //TODO for now, just halt
-- -- -- -- |	
-- -- -- -- |	@r0w1
-- -- -- -- |	//not readable and "writable" indicates the page is mapped but paged out
-- -- -- -- |	//page not resident
-- -- -- -- |	
-- -- -- -- |	//set up the stack
00 00 02 BA |	00 WOFST
00 00 02 BC |	IADF WBASE
00 00 02 BE |	SKIP PC
00 00 02 C0 |	::KERNEL_STACK
-- -- -- -- |	
-- -- -- -- |	//push function address onto stack
00 00 02 C4 |	IADF WMEM
00 00 02 C6 |	SKIP PC
00 00 02 C8 |	::get_open_physical_page
00 00 02 CC |	04 WOFST
00 00 02 CE |	RTRN LINK
00 00 02 D0 |	IADN PC
00 00 02 D2 |	::FUNC
-- -- -- -- |	
-- -- -- -- |	//result of function call is target physical page number
-- -- -- -- |	//pop result from stack
00 00 02 D6 |	00 WOFST
00 00 02 D8 |	WMEM GPH
-- -- -- -- |	
-- -- -- -- |	//load page from disk
-- -- -- -- |	//get disk block from PTE
00 00 02 DA |	    GPA ALUA //PTE to ALU
00 00 02 DC |	    IADF ALUB //mask to ALU
00 00 02 DE |	    SKIP PC
00 00 02 E0 |	    00 0F FF FF
00 00 02 E4 |	    08 ALUM //AND mode
00 00 02 E6 |	    ALUR GPD
-- -- -- -- |	
-- -- -- -- |	//load from disk
00 00 02 E8 |	    IADF RBASE
00 00 02 EA |	    SKIP PC
00 00 02 EC |	    00 00 10 18 //MMIO address of disk
-- -- -- -- |	    //tell disk the target physical page (stored in GPH)
00 00 02 F0 |	        00 ROFST
00 00 02 F2 |	        GPH RMEM
-- -- -- -- |	    //tell disk target disk block (stored in GPD)
00 00 02 F4 |	        04 ROFST
00 00 02 F6 |	        GPD RMEM
-- -- -- -- |	    //use read mode
00 00 02 F8 |	        08 ROFST
00 00 02 FA |	        00 RMEM
-- -- -- -- |	    //initiate transfer from disk to memory
00 00 02 FC |	        0C ROFST
00 00 02 FE |	        01 RMEM
-- -- -- -- |	
00 00 03 00 |	BREAK
-- -- -- -- |	
-- -- -- -- |	
-- -- -- -- |	//update process map and physical page map
-- -- -- -- |	
-- -- -- -- |	//return from interrupt
-- -- -- -- |	
-- -- -- -- |	
-- -- -- -- |	//nothing left
00 00 03 02 |	02 FPUM
00 00 03 04 |	11 FPUA
00 00 03 06 |	22 FPUB
00 00 03 08 |	FPUR GPC
00 00 03 0A |	7F FLAG
-- -- -- -- |	
00 00 03 0C |	FILL600
-- -- -- -- |	@@physical_page_map
-- -- -- -- |	//physical page map
-- -- -- -- |	
-- -- -- -- |	//=========================
-- -- -- -- |	// physical page mapping entry
-- -- -- -- |	//==========
-- -- -- -- |	// 0x00 |   uint    |   process id
-- -- -- -- |	// 0x04 |   uint    |   directory physical page
-- -- -- -- |	// 0x08 |   uint    |   virtual page number
-- -- -- -- |	// 0x0C |   uint    |   number of references
-- -- -- -- |	// 0x10 |   uint    |   disk block number
-- -- -- -- |	//=========================
-- -- -- -- |	
-- -- -- -- |	//boot sequence (no owner)
00 00 06 00 |	00 00 00 00
00 00 06 04 |	00 00 00 00
00 00 06 08 |	00 00 00 00
00 00 06 0C |	00 00 00 00
00 00 06 10 |	00 00 00 00
-- -- -- -- |	
-- -- -- -- |	//kernel page directory
00 00 06 14 |	00 00 00 01 //kernel process ID == 1
00 00 06 18 |	00 00 00 01 //owning page directory is this directory, kernel's page directory
00 00 06 1C |	00 00 00 00 //this is a directory
00 00 06 20 |	00 00 00 01 //kernel process references this physical page
00 00 06 24 |	00 00 00 00 //no disk block number, can never be evicted
-- -- -- -- |	
-- -- -- -- |	//kernel page table 0
00 00 06 28 |	00 00 00 01 //kernel process ID == 1
00 00 06 2C |	00 00 00 01 //owning page directory is kernel directory
00 00 06 30 |	00 00 00 00 //virtual table 0
00 00 06 34 |	00 00 00 01 //kernel process references this physical page
00 00 06 38 |	00 00 00 00 //no disk block number, can never be evicted
-- -- -- -- |	
-- -- -- -- |	//kernel virtual page 0
00 00 06 3C |	00 00 00 01 //kernel process ID == 1
00 00 06 40 |	00 00 00 01 //owning page directory is kernel directory
00 00 06 44 |	00 00 00 00 //virtual page 0
00 00 06 48 |	00 00 00 01 //kernel process references this physical page
00 00 06 4C |	00 00 00 00 //no disk block number, can never be evicted
-- -- -- -- |	
-- -- -- -- |	//empty (no owner)
00 00 06 50 |	00 00 00 00
00 00 06 54 |	00 00 00 00
00 00 06 58 |	00 00 00 00
00 00 06 5C |	00 00 00 00
00 00 06 60 |	00 00 00 00
-- -- -- -- |	
-- -- -- -- |	//user page directory
00 00 06 64 |	00 00 00 02 //user process ID == 2
00 00 06 68 |	00 00 00 05 //owning page directory is this directory, user's page directory
00 00 06 6C |	00 00 00 00 //this is a directory
00 00 06 70 |	00 00 00 01 //user process references this physical page
00 00 06 74 |	00 00 00 00 //no disk block number yet
-- -- -- -- |	
-- -- -- -- |	//user page table 0
00 00 06 78 |	00 00 00 02 //user process ID == 2
00 00 06 7C |	00 00 00 05 //owning page directory is user page directory
00 00 06 80 |	00 00 00 00 //virtual table 0
00 00 06 84 |	00 00 00 01 //user process references this physical page
00 00 06 88 |	00 00 00 00 //no disk block number yet
-- -- -- -- |	
-- -- -- -- |	//user virtual page 0
00 00 06 8C |	00 00 00 02 //user process ID == 2
00 00 06 90 |	00 00 00 05 //owning page directory is user page directory
00 00 06 94 |	00 00 00 00 //virtual page 0
00 00 06 98 |	00 00 00 01 //user process references this physical page
00 00 06 9C |	00 00 00 64 //loaded from disk block 100
-- -- -- -- |	
-- -- -- -- |	
-- -- -- -- |	
-- -- -- -- |	//empty (no owner)
00 00 06 A0 |	00 00 00 00
00 00 06 A4 |	00 00 00 00
00 00 06 A8 |	00 00 00 00
00 00 06 AC |	00 00 00 00
00 00 06 B0 |	00 00 00 00
-- -- -- -- |	//empty (no owner)
00 00 06 B4 |	00 00 00 00
00 00 06 B8 |	00 00 00 00
00 00 06 BC |	00 00 00 00
00 00 06 C0 |	00 00 00 00
00 00 06 C4 |	00 00 00 00
-- -- -- -- |	//empty (no owner)
00 00 06 C8 |	00 00 00 00
00 00 06 CC |	00 00 00 00
00 00 06 D0 |	00 00 00 00
00 00 06 D4 |	00 00 00 00
00 00 06 D8 |	00 00 00 00
-- -- -- -- |	//empty (no owner)
00 00 06 DC |	00 00 00 00
00 00 06 E0 |	00 00 00 00
00 00 06 E4 |	00 00 00 00
00 00 06 E8 |	00 00 00 00
00 00 06 EC |	00 00 00 00
-- -- -- -- |	//empty (no owner)
00 00 06 F0 |	00 00 00 00
00 00 06 F4 |	00 00 00 00
00 00 06 F8 |	00 00 00 00
00 00 06 FC |	00 00 00 00
00 00 07 00 |	00 00 00 00
-- -- -- -- |	//empty (no owner)
00 00 07 04 |	00 00 00 00
00 00 07 08 |	00 00 00 00
00 00 07 0C |	00 00 00 00
00 00 07 10 |	00 00 00 00
00 00 07 14 |	00 00 00 00
-- -- -- -- |	//empty (no owner)
00 00 07 18 |	00 00 00 00
00 00 07 1C |	00 00 00 00
00 00 07 20 |	00 00 00 00
00 00 07 24 |	00 00 00 00
00 00 07 28 |	00 00 00 00
-- -- -- -- |	//empty (no owner)
00 00 07 2C |	00 00 00 00
00 00 07 30 |	00 00 00 00
00 00 07 34 |	00 00 00 00
00 00 07 38 |	00 00 00 00
00 00 07 3C |	00 00 00 00
-- -- -- -- |	
-- -- -- -- |	//end physical page map (16 page mappings)
00 00 07 40 |	FILL840
-- -- -- -- |	//process map
-- -- -- -- |	
-- -- -- -- |	//=========================
-- -- -- -- |	// process map entry
-- -- -- -- |	//==========
-- -- -- -- |	// 0x00 |   uint    |   process id
-- -- -- -- |	// 0x04 |   uint    |   number of mapped virtual pages
-- -- -- -- |	// 0x08 |   uint    |   number of pages resident in memory
-- -- -- -- |	// 0x0C |   uint    |   disk block of process page directory
-- -- -- -- |	//=========================
-- -- -- -- |	
-- -- -- -- |	//kernel process descriptor
00 00 08 40 |	00 00 00 01 //kernel process ID == 1
00 00 08 44 |	00 00 00 03 //3 pages are mapped: 2 pages of memory and 1 mapped to the MMU
00 00 08 48 |	00 00 00 03 //page directory, page table, 1 page of memory
00 00 08 4C |	00 00 00 00 //no disk block number, kernel page directory can never be evicted
-- -- -- -- |	
-- -- -- -- |	//end process map (16 process descriptors)
00 00 08 50 |	FILL940
-- -- -- -- |	
-- -- -- -- |	
-- -- -- -- |	//=========================================================================
-- -- -- -- |	// [function] get_open_physical_page | void
-- -- -- -- |	//=========================================================================
-- -- -- -- |	@@get_open_physical_page
-- -- -- -- |	//returns physical page number that is available for incoming page
-- -- -- -- |	//may or may not result in page eviction
-- -- -- -- |	
-- -- -- -- |	
-- -- -- -- |	//calculate address where return value should be stored
00 00 09 40 |	    03 ALUM //subtract
00 00 09 42 |	    WBASE ALUA //original FP
00 00 09 44 |	    54 ALUB // -84
00 00 09 46 |	    ALUR GPH //GPH = result address = FP - 84
-- -- -- -- |	
-- -- -- -- |	//look for open pages, which we can use without evicting anything
-- -- -- -- |	//open pages have a process ID of 0
-- -- -- -- |	
-- -- -- -- |	//iterate over physical page map
-- -- -- -- |	    //point RMEM to physical page map array
00 00 09 48 |	        IADF RBASE
00 00 09 4A |	        SKIP PC
00 00 09 4C |	        ::physical_page_map
00 00 09 50 |	        00 ROFST
-- -- -- -- |	
00 00 09 52 |	    00 GPA //GPA = index
00 00 09 54 |	    10 GPB //GPB = max_index
-- -- -- -- |	
-- -- -- -- |	    @open_page_loop
-- -- -- -- |	    //check if we're at the end of the loop (index == 16?)
00 00 09 56 |	        GPA COMPA
00 00 09 58 |	        GPB COMPB
00 00 09 5A |	        COMPR PC
00 00 09 5C |	        :open_page_loop_end
00 00 09 60 |	        :open_page_loop_go
-- -- -- -- |	
-- -- -- -- |	    @open_page_loop_go
-- -- -- -- |	    //calculate offset from index
00 00 09 64 |	        02 ALUM //multiply mode
00 00 09 66 |	        GPA ALUA // ALUA = index
00 00 09 68 |	        14 ALUB //20 bytes per entry
00 00 09 6A |	        ALUR ROFST
-- -- -- -- |	
-- -- -- -- |	    //read process ID (offset 0)
00 00 09 6C |	    RMEM GPC //GPC = process id
-- -- -- -- |	
-- -- -- -- |	    //process id == 0?
00 00 09 6E |	        GPC COMPA
00 00 09 70 |	        00 COMPB
00 00 09 72 |	        COMPR PC
00 00 09 74 |	        :open_page_proc_id_0
00 00 09 78 |	        :open_page_loop_next
-- -- -- -- |	    
-- -- -- -- |	    @open_page_proc_id_0
-- -- -- -- |	    // found an open page
-- -- -- -- |	    // return the index as the open physical page
00 00 09 7C |	        WBASE ALUA //store FP somewhere
00 00 09 7E |	        GPH WBASE //point WMEM to the result address
00 00 09 80 |	        00 WOFST
00 00 09 82 |	        GPA WMEM //result = index
00 00 09 84 |	        ALUA WBASE //restore FP
00 00 09 86 |	        LINK PC //return
-- -- -- -- |	
-- -- -- -- |	    
-- -- -- -- |	
-- -- -- -- |	    @open_page_loop_next
-- -- -- -- |	    //increment index
00 00 09 88 |	        01 ALUM //add mode
00 00 09 8A |	        GPA ALUA
00 00 09 8C |	        01 ALUB
00 00 09 8E |	        ALUR GPA //index += 1
-- -- -- -- |	    //go to start of loop
00 00 09 90 |	    IADN PC
00 00 09 92 |	    :open_page_loop
-- -- -- -- |	
-- -- -- -- |	    //TODO implement this
-- -- -- -- |	
-- -- -- -- |	
-- -- -- -- |	@open_page_loop_end
-- -- -- -- |	//no open pages
00 00 09 96 |	BREAK
-- -- -- -- |	
-- -- -- -- |	
-- -- -- -- |	//TODO implement this
00 00 09 98 |	00 RBASE
00 00 09 9A |	00 ROFST
00 00 09 9C |	7F RMEM
-- -- -- -- |	
-- -- -- -- |	//return
00 00 09 9E |	LINK PC
