-- -- -- -- |	@@FUNC
-- -- -- -- |	/////////////////////////////////////////////////
-- -- -- -- |	//Call target function with new stack frame
-- -- -- -- |	//Processor state is preserved and restored
-- -- -- -- |	//before returning to caller
-- -- -- -- |	
-- -- -- -- |	//push target function arguments onto stack
-- -- -- -- |	//push target function address onto stack
-- -- -- -- |	//load return address into LINK
-- -- -- -- |	//jump to FUNC
-- -- -- -- |	//WMEM accessor is reserved for stack operations
-- -- -- -- |	//DMEM will be overwritten
-- -- -- -- |	//target function address will be overwritten with
-- -- -- -- |	//function call result
-- -- -- -- |	
-- -- -- -- |	//target function should store result at (FP - 0x54 (84))
-- -- -- -- |	//first function argument is accessible at (FP - 0x58 (88))
-- -- -- -- |	
-- -- -- -- |	//invoke this helper with:
-- -- -- -- |	//RTRN LINK
-- -- -- -- |	//IADN PC
-- -- -- -- |	//::FUNC
-- -- -- -- |	/////////////////////////////////////////////////
-- -- -- -- |	//caller save layout
-- -- -- -- |	//GPA
-- -- -- -- |	//GPB
-- -- -- -- |	//GPC
-- -- -- -- |	//GPD
-- -- -- -- |	//GPE
-- -- -- -- |	//GPF
-- -- -- -- |	//GPG
-- -- -- -- |	//GPH
-- -- -- -- |	//ALUM
-- -- -- -- |	//ALUA
-- -- -- -- |	//ALUB
-- -- -- -- |	//FPUM
-- -- -- -- |	//FPUA
-- -- -- -- |	//FPUB
-- -- -- -- |	//RBASE
-- -- -- -- |	//ROFST
-- -- -- -- |	//COMPA
-- -- -- -- |	//COMPB
-- -- -- -- |	//LINK
-- -- -- -- |	//frame pointer
-- -- -- -- |	/////////////////////////////////////////////////
-- -- -- -- |	
-- -- -- -- |	//clear ALU
00 00 07 F0 |	ALUM DMEM00
00 00 07 F2 |	ALUA DMEM04
00 00 07 F4 |	ALUB DMEM08
-- -- -- -- |	
-- -- -- -- |	//clear GPA to store target address
00 00 07 F6 |	GPA DMEM0C
-- -- -- -- |	
-- -- -- -- |	//set up ALU for popping target function address
00 00 07 F8 |	03 ALUM //subtract mode
00 00 07 FA |	WOFST ALUA
00 00 07 FC |	04 ALUB //4 bytes per register
-- -- -- -- |	
-- -- -- -- |	
-- -- -- -- |	// STACK ////////////////////////////////////////
-- -- -- -- |	// ... local variables      <--- FP
-- -- -- -- |	// arg2
-- -- -- -- |	// arg1
-- -- -- -- |	// arg0
-- -- -- -- |	// target function address
-- -- -- -- |	//                          <--- SP
-- -- -- -- |	//WBASE currently holds caller FP
-- -- -- -- |	//WOFST currently holds caller SP
-- -- -- -- |	
-- -- -- -- |	//read top of stack: target function address
00 00 07 FE |	ALUR WOFST //SP = SP - 4
00 00 08 00 |	WMEM GPA
-- -- -- -- |	
-- -- -- -- |	//restore SP to top of stack
00 00 08 02 |	ALUA WOFST //SP = SP
-- -- -- -- |	
-- -- -- -- |	//set up ALU for stacking
00 00 08 04 |	01 ALUM //add mode
-- -- -- -- |	
-- -- -- -- |	//push caller save registers onto stack
00 00 08 06 |	DMEM0C WMEM //GPA was stored in DMEM earlier
00 00 08 08 |	ALUR WOFST
00 00 08 0A |	ALUR ALUA
00 00 08 0C |	GPB WMEM
00 00 08 0E |	ALUR WOFST
00 00 08 10 |	ALUR ALUA
00 00 08 12 |	GPC WMEM
00 00 08 14 |	ALUR WOFST
00 00 08 16 |	ALUR ALUA
00 00 08 18 |	GPD WMEM
00 00 08 1A |	ALUR WOFST
00 00 08 1C |	ALUR ALUA
00 00 08 1E |	GPE WMEM
00 00 08 20 |	ALUR WOFST
00 00 08 22 |	ALUR ALUA
00 00 08 24 |	GPF WMEM
00 00 08 26 |	ALUR WOFST
00 00 08 28 |	ALUR ALUA
00 00 08 2A |	GPG WMEM
00 00 08 2C |	ALUR WOFST
00 00 08 2E |	ALUR ALUA
00 00 08 30 |	GPH WMEM
00 00 08 32 |	ALUR WOFST
00 00 08 34 |	ALUR ALUA
-- -- -- -- |	
-- -- -- -- |	//ALU was stored in DMEM temporarily
00 00 08 36 |	DMEM00 WMEM
00 00 08 38 |	ALUR WOFST
00 00 08 3A |	ALUR ALUA
00 00 08 3C |	DMEM04 WMEM
00 00 08 3E |	ALUR WOFST
00 00 08 40 |	ALUR ALUA
00 00 08 42 |	DMEM08 WMEM
00 00 08 44 |	ALUR WOFST
00 00 08 46 |	ALUR ALUA
-- -- -- -- |	
00 00 08 48 |	FPUM WMEM
00 00 08 4A |	ALUR WOFST
00 00 08 4C |	ALUR ALUA
00 00 08 4E |	FPUA WMEM
00 00 08 50 |	ALUR WOFST
00 00 08 52 |	ALUR ALUA
00 00 08 54 |	FPUB WMEM
00 00 08 56 |	ALUR WOFST
00 00 08 58 |	ALUR ALUA
-- -- -- -- |	
00 00 08 5A |	RBASE WMEM
00 00 08 5C |	ALUR WOFST
00 00 08 5E |	ALUR ALUA
00 00 08 60 |	ROFST WMEM
00 00 08 62 |	ALUR WOFST
00 00 08 64 |	ALUR ALUA
-- -- -- -- |	
00 00 08 66 |	COMPA WMEM
00 00 08 68 |	ALUR WOFST
00 00 08 6A |	ALUR ALUA
00 00 08 6C |	COMPB WMEM
00 00 08 6E |	ALUR WOFST
00 00 08 70 |	ALUR ALUA
-- -- -- -- |	
00 00 08 72 |	LINK WMEM
00 00 08 74 |	ALUR WOFST
00 00 08 76 |	ALUR ALUA
-- -- -- -- |	
-- -- -- -- |	//push frame pointer on to stack
00 00 08 78 |	WBASE WMEM
00 00 08 7A |	ALUR WOFST
-- -- -- -- |	
-- -- -- -- |	//add a stack frame
00 00 08 7C |	WBASE ALUA
00 00 08 7E |	WOFST ALUB
00 00 08 80 |	ALUR WBASE
00 00 08 82 |	00 WOFST
-- -- -- -- |	
00 00 08 84 |	SKIP LINK
00 00 08 86 |	GPA PC
00 00 08 88 |	00 00 //NOP so SKIP points to the correct address
-- -- -- -- |	
-- -- -- -- |	//return from target function
-- -- -- -- |	
-- -- -- -- |	//retrieve frame pointer from stack
-- -- -- -- |	//subtract 4 from the current frame pointer to
-- -- -- -- |	//get the last item on the stack (the last FP)
00 00 08 8A |	WBASE ALUA
00 00 08 8C |	04 ALUB
00 00 08 8E |	03 ALUM //subtract mode
00 00 08 90 |	ALUR WBASE //set WBASE to last stack slot
00 00 08 92 |	00 WOFST //(clear WOFST)
00 00 08 94 |	WMEM WBASE //FP is the last thing in the stack
-- -- -- -- |	
00 00 08 96 |	ALUR ALUA //ALUR still holds the top stack slot, equivalent to (old FP + old SP)
00 00 08 98 |	WBASE ALUB
-- -- -- -- |	//subtract last FP (WBASE) from last FP + SP (ALUR) to get last SP
00 00 08 9A |	ALUR WOFST //store last SP in WOFST
-- -- -- -- |	//WBASE now holds old FP and WOFST now holds old SP
-- -- -- -- |	//FP and SP are now current
-- -- -- -- |	
-- -- -- -- |	//set up ALU for unstacking
00 00 08 9C |	WOFST ALUA //FP to ALU
00 00 08 9E |	04 ALUB //ALU is in -4 mode
-- -- -- -- |	
-- -- -- -- |	//pop last FP from the stack, don't store because it's already in WBASE
00 00 08 A0 |	ALUR WOFST
00 00 08 A2 |	ALUR ALUA
-- -- -- -- |	
-- -- -- -- |	//pop caller save registers from stack
00 00 08 A4 |	WMEM LINK
00 00 08 A6 |	ALUR WOFST
00 00 08 A8 |	ALUR ALUA
-- -- -- -- |	
00 00 08 AA |	WMEM COMPB
00 00 08 AC |	ALUR WOFST
00 00 08 AE |	ALUR ALUA
00 00 08 B0 |	WMEM COMPA
00 00 08 B2 |	ALUR WOFST
00 00 08 B4 |	ALUR ALUA
-- -- -- -- |	
00 00 08 B6 |	WMEM ROFST
00 00 08 B8 |	ALUR WOFST
00 00 08 BA |	ALUR ALUA
00 00 08 BC |	WMEM RBASE
00 00 08 BE |	ALUR WOFST
00 00 08 C0 |	ALUR ALUA
-- -- -- -- |	
00 00 08 C2 |	WMEM FPUB
00 00 08 C4 |	ALUR WOFST
00 00 08 C6 |	ALUR ALUA
00 00 08 C8 |	WMEM FPUA
00 00 08 CA |	ALUR WOFST
00 00 08 CC |	ALUR ALUA
00 00 08 CE |	WMEM FPUM
00 00 08 D0 |	ALUR WOFST
00 00 08 D2 |	ALUR ALUA
-- -- -- -- |	
-- -- -- -- |	//store ALU in DMEM while we're still using it
00 00 08 D4 |	WMEM DMEM08 //ALUB
00 00 08 D6 |	ALUR WOFST
00 00 08 D8 |	ALUR ALUA
00 00 08 DA |	WMEM DMEM04 //ALUA
00 00 08 DC |	ALUR WOFST
00 00 08 DE |	ALUR ALUA
00 00 08 E0 |	WMEM DMEM00 //ALUM
00 00 08 E2 |	ALUR WOFST
00 00 08 E4 |	ALUR ALUA
-- -- -- -- |	
00 00 08 E6 |	WMEM GPH
00 00 08 E8 |	ALUR WOFST
00 00 08 EA |	ALUR ALUA
00 00 08 EC |	WMEM GPG
00 00 08 EE |	ALUR WOFST
00 00 08 F0 |	ALUR ALUA
00 00 08 F2 |	WMEM GPF
00 00 08 F4 |	ALUR WOFST
00 00 08 F6 |	ALUR ALUA
00 00 08 F8 |	WMEM GPE
00 00 08 FA |	ALUR WOFST
00 00 08 FC |	ALUR ALUA
00 00 08 FE |	WMEM GPD
00 00 09 00 |	ALUR WOFST
00 00 09 02 |	ALUR ALUA
00 00 09 04 |	WMEM GPC
00 00 09 06 |	ALUR WOFST
00 00 09 08 |	ALUR ALUA
00 00 09 0A |	WMEM GPB
00 00 09 0C |	ALUR WOFST
00 00 09 0E |	ALUR ALUA
00 00 09 10 |	WMEM GPA
-- -- -- -- |	
-- -- -- -- |	//finished with ALU, restore it from DMEM
-- -- -- -- |	//TODO this can be made slightly more efficient by just doing ALU last
00 00 09 12 |	DMEM00 ALUM
00 00 09 14 |	DMEM04 ALUA
00 00 09 16 |	DMEM08 ALUB
-- -- -- -- |	
-- -- -- -- |	//return to the caller
00 00 09 18 |	LINK PC
-- -- -- -- |	/////////////////////////////////////////////////
