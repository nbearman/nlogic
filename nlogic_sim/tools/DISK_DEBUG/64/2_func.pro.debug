-- -- -- -- |	@@FUNC
-- -- -- -- |	/////////////////////////////////////////////////
-- -- -- -- |	//Call target function with new stack frame
-- -- -- -- |	//Processor state is preserved and restored
-- -- -- -- |	//before returning to caller
-- -- -- -- |	
-- -- -- -- |	//push target function arguments onto stack
-- -- -- -- |	//push target function address onto stack
-- -- -- -- |	//load return address into LINK
-- -- -- -- |	//jump to FUNC
-- -- -- -- |	//WMEM accessor is reserved for stack operations
-- -- -- -- |	//DMEM will be overwritten
-- -- -- -- |	//target function address will be overwritten with
-- -- -- -- |	//function call result
-- -- -- -- |	
-- -- -- -- |	//target function should store result at (FP - 0x54 (84))
-- -- -- -- |	//first function argument is accessible at (FP - 0x58 (88))
-- -- -- -- |	
-- -- -- -- |	//invoke this helper with:
-- -- -- -- |	//RTRN LINK
-- -- -- -- |	//IADN PC
-- -- -- -- |	//::FUNC
-- -- -- -- |	/////////////////////////////////////////////////
-- -- -- -- |	//caller save layout
-- -- -- -- |	//GPA
-- -- -- -- |	//GPB
-- -- -- -- |	//GPC
-- -- -- -- |	//GPD
-- -- -- -- |	//GPE
-- -- -- -- |	//GPF
-- -- -- -- |	//GPG
-- -- -- -- |	//GPH
-- -- -- -- |	//ALUM
-- -- -- -- |	//ALUA
-- -- -- -- |	//ALUB
-- -- -- -- |	//FPUM
-- -- -- -- |	//FPUA
-- -- -- -- |	//FPUB
-- -- -- -- |	//RBASE
-- -- -- -- |	//ROFST
-- -- -- -- |	//COMPA
-- -- -- -- |	//COMPB
-- -- -- -- |	//LINK
-- -- -- -- |	//frame pointer
-- -- -- -- |	/////////////////////////////////////////////////
-- -- -- -- |	
-- -- -- -- |	//clear ALU
00 00 08 74 |	ALUM DMEM00
00 00 08 76 |	ALUA DMEM04
00 00 08 78 |	ALUB DMEM08
-- -- -- -- |	
-- -- -- -- |	//clear GPA to store target address
00 00 08 7A |	GPA DMEM0C
-- -- -- -- |	
-- -- -- -- |	//set up ALU for popping target function address
00 00 08 7C |	03 ALUM //subtract mode
00 00 08 7E |	WOFST ALUA
00 00 08 80 |	04 ALUB //4 bytes per register
-- -- -- -- |	
-- -- -- -- |	
-- -- -- -- |	// STACK ////////////////////////////////////////
-- -- -- -- |	// ... local variables      <--- FP
-- -- -- -- |	// arg2
-- -- -- -- |	// arg1
-- -- -- -- |	// arg0
-- -- -- -- |	// target function address
-- -- -- -- |	//                          <--- SP
-- -- -- -- |	//WBASE currently holds caller FP
-- -- -- -- |	//WOFST currently holds caller SP
-- -- -- -- |	
-- -- -- -- |	//read top of stack: target function address
00 00 08 82 |	ALUR WOFST //SP = SP - 4
00 00 08 84 |	WMEM GPA
-- -- -- -- |	
-- -- -- -- |	//restore SP to top of stack
00 00 08 86 |	ALUA WOFST //SP = SP
-- -- -- -- |	
-- -- -- -- |	//set up ALU for stacking
00 00 08 88 |	01 ALUM //add mode
-- -- -- -- |	
-- -- -- -- |	//push caller save registers onto stack
00 00 08 8A |	DMEM0C WMEM //GPA was stored in DMEM earlier
00 00 08 8C |	ALUR WOFST
00 00 08 8E |	ALUR ALUA
00 00 08 90 |	GPB WMEM
00 00 08 92 |	ALUR WOFST
00 00 08 94 |	ALUR ALUA
00 00 08 96 |	GPC WMEM
00 00 08 98 |	ALUR WOFST
00 00 08 9A |	ALUR ALUA
00 00 08 9C |	GPD WMEM
00 00 08 9E |	ALUR WOFST
00 00 08 A0 |	ALUR ALUA
00 00 08 A2 |	GPE WMEM
00 00 08 A4 |	ALUR WOFST
00 00 08 A6 |	ALUR ALUA
00 00 08 A8 |	GPF WMEM
00 00 08 AA |	ALUR WOFST
00 00 08 AC |	ALUR ALUA
00 00 08 AE |	GPG WMEM
00 00 08 B0 |	ALUR WOFST
00 00 08 B2 |	ALUR ALUA
00 00 08 B4 |	GPH WMEM
00 00 08 B6 |	ALUR WOFST
00 00 08 B8 |	ALUR ALUA
-- -- -- -- |	
-- -- -- -- |	//ALU was stored in DMEM temporarily
00 00 08 BA |	DMEM00 WMEM
00 00 08 BC |	ALUR WOFST
00 00 08 BE |	ALUR ALUA
00 00 08 C0 |	DMEM04 WMEM
00 00 08 C2 |	ALUR WOFST
00 00 08 C4 |	ALUR ALUA
00 00 08 C6 |	DMEM08 WMEM
00 00 08 C8 |	ALUR WOFST
00 00 08 CA |	ALUR ALUA
-- -- -- -- |	
00 00 08 CC |	FPUM WMEM
00 00 08 CE |	ALUR WOFST
00 00 08 D0 |	ALUR ALUA
00 00 08 D2 |	FPUA WMEM
00 00 08 D4 |	ALUR WOFST
00 00 08 D6 |	ALUR ALUA
00 00 08 D8 |	FPUB WMEM
00 00 08 DA |	ALUR WOFST
00 00 08 DC |	ALUR ALUA
-- -- -- -- |	
00 00 08 DE |	RBASE WMEM
00 00 08 E0 |	ALUR WOFST
00 00 08 E2 |	ALUR ALUA
00 00 08 E4 |	ROFST WMEM
00 00 08 E6 |	ALUR WOFST
00 00 08 E8 |	ALUR ALUA
-- -- -- -- |	
00 00 08 EA |	COMPA WMEM
00 00 08 EC |	ALUR WOFST
00 00 08 EE |	ALUR ALUA
00 00 08 F0 |	COMPB WMEM
00 00 08 F2 |	ALUR WOFST
00 00 08 F4 |	ALUR ALUA
-- -- -- -- |	
00 00 08 F6 |	LINK WMEM
00 00 08 F8 |	ALUR WOFST
00 00 08 FA |	ALUR ALUA
-- -- -- -- |	
-- -- -- -- |	//push frame pointer on to stack
00 00 08 FC |	WBASE WMEM
00 00 08 FE |	ALUR WOFST
-- -- -- -- |	
-- -- -- -- |	//add a stack frame
00 00 09 00 |	WBASE ALUA
00 00 09 02 |	WOFST ALUB
00 00 09 04 |	ALUR WBASE
00 00 09 06 |	00 WOFST
-- -- -- -- |	
00 00 09 08 |	SKIP LINK
00 00 09 0A |	GPA PC
00 00 09 0C |	00 00 //NOP so SKIP points to the correct address
-- -- -- -- |	
-- -- -- -- |	//return from target function
-- -- -- -- |	
-- -- -- -- |	//retrieve frame pointer from stack
-- -- -- -- |	//subtract 4 from the current frame pointer to
-- -- -- -- |	//get the last item on the stack (the last FP)
00 00 09 0E |	WBASE ALUA
00 00 09 10 |	04 ALUB
00 00 09 12 |	03 ALUM //subtract mode
00 00 09 14 |	ALUR WBASE //set WBASE to last stack slot
00 00 09 16 |	00 WOFST //(clear WOFST)
00 00 09 18 |	WMEM WBASE //FP is the last thing in the stack
-- -- -- -- |	
00 00 09 1A |	ALUR ALUA //ALUR still holds the top stack slot, equivalent to (old FP + old SP)
00 00 09 1C |	WBASE ALUB
-- -- -- -- |	//subtract last FP (WBASE) from last FP + SP (ALUR) to get last SP
00 00 09 1E |	ALUR WOFST //store last SP in WOFST
-- -- -- -- |	//WBASE now holds old FP and WOFST now holds old SP
-- -- -- -- |	//FP and SP are now current
-- -- -- -- |	
-- -- -- -- |	//set up ALU for unstacking
00 00 09 20 |	WOFST ALUA //FP to ALU
00 00 09 22 |	04 ALUB //ALU is in -4 mode
-- -- -- -- |	
-- -- -- -- |	//pop last FP from the stack, don't store because it's already in WBASE
00 00 09 24 |	ALUR WOFST
00 00 09 26 |	ALUR ALUA
-- -- -- -- |	
-- -- -- -- |	//pop caller save registers from stack
00 00 09 28 |	WMEM LINK
00 00 09 2A |	ALUR WOFST
00 00 09 2C |	ALUR ALUA
-- -- -- -- |	
00 00 09 2E |	WMEM COMPB
00 00 09 30 |	ALUR WOFST
00 00 09 32 |	ALUR ALUA
00 00 09 34 |	WMEM COMPA
00 00 09 36 |	ALUR WOFST
00 00 09 38 |	ALUR ALUA
-- -- -- -- |	
00 00 09 3A |	WMEM ROFST
00 00 09 3C |	ALUR WOFST
00 00 09 3E |	ALUR ALUA
00 00 09 40 |	WMEM RBASE
00 00 09 42 |	ALUR WOFST
00 00 09 44 |	ALUR ALUA
-- -- -- -- |	
00 00 09 46 |	WMEM FPUB
00 00 09 48 |	ALUR WOFST
00 00 09 4A |	ALUR ALUA
00 00 09 4C |	WMEM FPUA
00 00 09 4E |	ALUR WOFST
00 00 09 50 |	ALUR ALUA
00 00 09 52 |	WMEM FPUM
00 00 09 54 |	ALUR WOFST
00 00 09 56 |	ALUR ALUA
-- -- -- -- |	
-- -- -- -- |	//store ALU in DMEM while we're still using it
00 00 09 58 |	WMEM DMEM08 //ALUB
00 00 09 5A |	ALUR WOFST
00 00 09 5C |	ALUR ALUA
00 00 09 5E |	WMEM DMEM04 //ALUA
00 00 09 60 |	ALUR WOFST
00 00 09 62 |	ALUR ALUA
00 00 09 64 |	WMEM DMEM00 //ALUM
00 00 09 66 |	ALUR WOFST
00 00 09 68 |	ALUR ALUA
-- -- -- -- |	
00 00 09 6A |	WMEM GPH
00 00 09 6C |	ALUR WOFST
00 00 09 6E |	ALUR ALUA
00 00 09 70 |	WMEM GPG
00 00 09 72 |	ALUR WOFST
00 00 09 74 |	ALUR ALUA
00 00 09 76 |	WMEM GPF
00 00 09 78 |	ALUR WOFST
00 00 09 7A |	ALUR ALUA
00 00 09 7C |	WMEM GPE
00 00 09 7E |	ALUR WOFST
00 00 09 80 |	ALUR ALUA
00 00 09 82 |	WMEM GPD
00 00 09 84 |	ALUR WOFST
00 00 09 86 |	ALUR ALUA
00 00 09 88 |	WMEM GPC
00 00 09 8A |	ALUR WOFST
00 00 09 8C |	ALUR ALUA
00 00 09 8E |	WMEM GPB
00 00 09 90 |	ALUR WOFST
00 00 09 92 |	ALUR ALUA
00 00 09 94 |	WMEM GPA
-- -- -- -- |	
-- -- -- -- |	//finished with ALU, restore it from DMEM
-- -- -- -- |	//TODO this can be made slightly more efficient by just doing ALU last
00 00 09 96 |	DMEM00 ALUM
00 00 09 98 |	DMEM04 ALUA
00 00 09 9A |	DMEM08 ALUB
-- -- -- -- |	
-- -- -- -- |	//return to the caller
00 00 09 9C |	LINK PC
-- -- -- -- |	/////////////////////////////////////////////////
