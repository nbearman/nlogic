Look into changing MMIO to allow enter/exit read/write mode
	Processor can only issue one write at a time
		This is due to the available instructions of the processor, not the design on the MMIO interface
	Moving large amounts of memory to IO devices would require acquiring and releasing locks over and over again
		It would also require many instructions
		Therefore, there is a high cost for both the processor in the simulation and running the simulation
	Alternative: create a DMA (direct memory access) controller IO device
		Processor sends signal and address to DMA controller
		DMA controller writes range of data from memory to MMIO device with single call to device's write_memory()
			Therefore minmizing lock acquisition

Processor visualizer (new)
	Add register listeners to processor visualizer
		Cue visualizations based on register contents (like changing color of FLAG name)
	Make FLAG name change color when system halts
		Possibly by implementing register listeners
	Move the visualizer outside of the processor class
		Living inside the processor makes accessing registers very simple, which is common for the visualizer
		Maybe the visualizer can be a nested class