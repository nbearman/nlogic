PTE rework
	Change MMU to skip automatically marking read bits
	Change MMU to fault (retryable) on unreferenced page, including page tables
	Change page fault handler to mark unreferenced page as referenced
	Remove all references to F and D bits


Change boot program to load page tables from disk instead of creating them with instructions
	this will make it easier to write test programs while working on page fault handlers

(done?) Add cycle delay to MMU breakpoint to avoid returning early
	Can also be implemented in software by the interrupt handler by introspecting return addressing
	Manually check for collisions with kernel handler memory accesses
		High complexity, easier to add cycle delay to MMU

Figure out what the interrupt handler should do with the interrupt channel bits
	Should they all be cleared? Should handlers only clear bits that they resolved?
	Should kernel handled interrupts leave the user interrupt bits untouched?

Add macros for ALU and FPU modes

Add some static analysis to debug assembler to catch bugs
	Ex.: Check for multiple writes to ALUA before reading alur
		Do not count multiple writes to ALUA if there is a write to PC in between
		Also reset if there is a label definition (implies entry might come between writes)

Kernel should not map all of physical memory in its VA space
	If the size of physical memory matches the size of the virtual address space, every kernel VA will be mapped to a physical address
	Instead of mapping all of physical memory in kernel VA space, add direct memory access to MMU
		MMU could have special physical target address register and physical memory access register
			Kernel can specify an address in the target register and then read or write to the access register to access that physical address
		For larger amounts of memory, the MMU could possibly implement range-based DMA transfer (either PA -> PA or kernel VA -> PA)
	
Move MMU mapping in kernel VA to much higher address
	MMU is mapped to 0x1000 in kernel VA; interrupt handler is going to overrun this

Consider addding a bit to PTE that specifies if the PTE is a page directory entry or a page table entry
	this could simplify the page fault handler
		currently, we don't know if the page we have to bring in to memory is a page table or a leaf page
		we need to know because we need to know if we need to udpate the parent page table or just the page directory
			with the newly resident page's info

Disk operation should be async
	currently processor blocks while loading from virtual disk
	change the interface (or implement an AsyncDisk instead of SimpleDisk) to start a transfer and
		set a flag register (or interrupt?) when the transfer is complete
		Maybe the kernel can request a non-interrupt transfer and users can use interrupt based transfer
			kernel needs to load from disk during page eviction, but interrupts must be disabled during that time
				it's ok for the kernel to wait and spin while waiting for a page transfer to finish, since nothing
					else can happen until the transfer is complete
						(in theory for large memory systems this isn't true, another process could be resumed)
			busy waiting in a user program is not desirable, so using user defined disk load interrupt handlers would be ideal

====================================================================================

continue with loading page from disk:
    [done] make MMU store faulted virtual address (if it doesn't already)
		in fault handler, retrieve faulted virtual address from MMU
			currently we're only getting the faulted PTE
			we need the virtual address to know what virtual page / page table we're fetching, and to store that info in the physical page map
    update the physical page map
        make process ID not hardcoded
        make page directory physical block not hardcoded
            accessible from the process map once we know the process ID
    update the process map

Fix virtual disk so that writing 4 bytes to the transfer register doesn't initiate 4 transfers
    just make the nominal byte start the transfer

Map physical memory to kernel's address space
    could probably load these page tables from disk rather than building them during boot

====================================================================================

Change simulator to accept configuration file as command line argument to set up memory, MMIO devices, etc.

Document current state of assembler and assembler pro functionality
	FILL, STACK macros

====================================================================================

Determine how to handle reading / writing over page boundaries
	Currently, environment gets translated base address from the MMU
	Processor can only read and write 4 bytes at a time due to using 4 byte registers
	The processor could issue a read where the base address is translated without fault (first byte is in bounds)
		The fourth byte might be on a different page, but the MMU can't stop reading this byte because the environment
		takes the MMU-translated address and just reads the next 4 addresses

====================================================================================

Change processor to only access memory when the current instruction requires it
	Do not prematurely fetch COMPR, IADN, IADF, RMEM, WMEM
	Will this prevent any problems?

Update trap to new model

====================================================================================

Tests
	Complete TestMain
		Add assembler method to read in dumped assembly to assembler.assembly_data
		Add a way to create correct output
			Change processor to write state to output file
	

Look into changing MMIO to allow enter/exit read/write mode
	Processor can only issue one write at a time
		This is due to the available instructions of the processor, not the design of the MMIO interface
	Moving large amounts of memory to IO devices would require acquiring and releasing locks over and over again
		It would also require many instructions
		Therefore, there is a high cost for both the processor in the simulation and running the simulation
	Alternative: create a DMA (direct memory access) controller IO device
		Processor sends signal and address to DMA controller
		DMA controller writes range of data from memory to MMIO device with single call to device's write_memory()
			Therefore mininmizing lock acquisition

Processor visualizer (new)
	Add register listeners to processor visualizer
		Cue visualizations based on register contents (like changing color of FLAG name)
	Make FLAG name change color when system halts
		Possibly by implementing register listeners
	Move the visualizer outside of the processor class
		Living inside the processor makes accessing registers very simple, which is common for the visualizer
		Maybe the visualizer can be a nested class
	(done?) Change the memory context preview readouts to work with virtual addressing
		Processor visualizer must not raise interrupts or page table faults
		(not done) Perhaps color preview along page boundaries, conditional on status of the page
			(kernel, unmapped, dirty, etc.)

Operating system
	Interrupt handlers
		MMU interrupts
		Timer interrupts
		Syscall interrupts
		IO interrupts
	Kernel boot process
		Initializing page tables
		Initiating the hardware timer for preemption
	Kernel scheduler

Virtual keyboard
	Create virtual keyboard
	Runs its own thread that listens for Console.readkey()
	When key is pressed
		Save the keypress
		Send interrupt to processor

Page table
	Establish page table layout that both MMU and OS can use
